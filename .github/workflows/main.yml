name: Python Test and Package

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - master

jobs:
  test:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        python -m flake8 . --count --exit-zero --statistics
    - name: Test with pytest
      run: |
        python -m pytest --junitxml=junit/test-results-${{ matrix.python-version }}.xml
    - name: Upload pytest test results
      uses: actions/upload-artifact@v1
      with:
        name: pytest-results-${{ matrix.python-version }}
        path: junit/test-results-${{ matrix.python-version }}.xml
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}

  package_docs:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt -r requirements-dev.txt -r docs/requirements.txt
          python -m pip install wheel
      - name: Build package
        run: |
          python setup.py sdist bdist_wheel
          ls -la dist
      - name: Upload package
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v1
        with:
          name: python-packages
          path: dist
      - name: Build Sphinx Documentation
        run: |
          # install so that setuptools_scm generate version for package
          pip install -e .
          make -C docs html
      - name: Upload documentation
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v1
        with:
          name: sphinx-docs
          path: docs/_build/html
      - name: Update gh-pages
        if: github.ref == 'refs/heads/master'
        run: |
          rm docs/_build/html/.buildinfo
          touch docs/_build/html/.nojekyll

          git update-ref refs/heads/${TARGET_BRANCH} origin/${TARGET_BRANCH}
          ./utils/update-gh-pages.sh docs/_build/html

          repo_uri="https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git push $repo_uri ${TARGET_BRANCH}
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
          TARGET_BRANCH: 'gh-pages'

  github_release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: package_docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        id: download
        with:
          name: python-packages
      - name: Extract Python Packages
        id: files
        run: |
          cd ${{steps.download.outputs.download-path}}
          echo ::set-output name=file1::$(ls sitkibex*any.whl)
          echo ::set-output name=file2::$(ls sitkibex*.tar.gz)
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset Wheel
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include
          # a `upload_url`. See this blog post for more info:
          # https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{steps.download.outputs.download-path}}/${{steps.files.outputs.file1}}
          asset_name: ${{steps.files.outputs.file1}}
          asset_content_type: application/octet-stream
      - name: Upload Release Asset Source
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{steps.download.outputs.download-path}}/${{steps.files.outputs.file2}}
          asset_name: ${{steps.files.outputs.file2}}
          asset_content_type: application/octet-stream
