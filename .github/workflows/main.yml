name: Python Test and Package

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - master

jobs:
  linting_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Linting
      run: |
        python -m pip install pre-commit trufflehog3>=3.0
        pre-commit run --all-files
    - name: set PY
      run: echo "PY=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
    - uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: pre-commit|${{ env.PY }}|${{ hashFiles('.pre-commit-config.yaml') }}
    - name: Run trufflehog3  detector
      run: |
        trufflehog3 -v -c trufflehog3.yml . && echo "tufflehog3 OK"

  test:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
    - name: Test with pytest
      run: |
        python -m pytest

  package_docs:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt -r docs/requirements.txt twine build
      - name: Build package
        run: |
          python -m build --wheel --sdist
          python -m twine check dist/*
          ls -la dist
      - name: Upload package
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v3
        with:
          name: python-packages
          path: dist
      - name: Build Sphinx Documentation
        run: |
          # install so that setuptools_scm generate version for package
          pip install -e .
          make -C docs html
      - name: Upload documentation
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v3
        with:
          name: sphinx-docs
          path: docs/_build/html
      - name: Update gh-pages
        if: github.ref == 'refs/heads/master'
        run: |
          rm docs/_build/html/.buildinfo
          touch docs/_build/html/.nojekyll

          git update-ref refs/heads/${TARGET_BRANCH} origin/${TARGET_BRANCH}
          ./utils/update-gh-pages.sh docs/_build/html

          repo_uri="https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git push $repo_uri ${TARGET_BRANCH}
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
          TARGET_BRANCH: 'gh-pages'

  github_release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: package_docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        id: download
        with:
          name: python-packages
      - name: Create Release and Upload
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} --repo ${{ github.repository }} --verify-tag --generate-notes --title "Release ${{ github.ref_name }}"
          gh release upload ${{ github.ref_name }} --repo ${{ github.repository }} ${{steps.download.outputs.download-path}}/*
